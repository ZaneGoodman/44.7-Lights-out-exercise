{"ast":null,"code":"var _jsxFileName = \"/home/zanegoodman/Springboard/Section_44_ReactJS_Fundamentals/44.7_Component_design/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be:\n * [[f, f, f],\n * [t, t, f],\n * [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const chance = () => Math.floor(Math.random() * chanceLightStartsOn) + 1;\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = Array.from({\n      length: ncols\n    }, () => Array.from({\n      length: nrows\n    }, () => chance() === chanceLightStartsOn ? true : false));\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => cell === true));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const copy = oldBoard.map(row => [...row]);\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, copy);\n      flipCell(y, x + 1, copy);\n      flipCell(y, x - 1, copy);\n      flipCell(y + 1, x, copy);\n      flipCell(y - 1, x, copy);\n      // TODO: return the copy\n      return copy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"You Win!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n  // TODO\n\n  // make table board\n  let tableBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[y][x],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this));\n    }\n    tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n  // TODO\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","chance","Math","floor","random","board","setBoard","createBoard","initialBoard","Array","from","length","hasWon","every","row","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","copy","children","fileName","_jsxFileName","lineNumber","columnNumber","tableBoard","push","isLit","flipCellsAroundMe","className","_c","$RefreshReg$"],"sources":["/home/zanegoodman/Springboard/Section_44_ReactJS_Fundamentals/44.7_Component_design/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be:\n * [[f, f, f],\n * [t, t, f],\n * [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const chance = () => Math.floor(Math.random() * chanceLightStartsOn) + 1;\n  const [board, setBoard] = useState(createBoard());\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = Array.from({ length: ncols }, () =>\n      Array.from({ length: nrows }, () =>\n        chance() === chanceLightStartsOn ? true : false\n      )\n    );\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every((row) => row.every((cell) => cell === true));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard((oldBoard) => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const copy = oldBoard.map((row) => [...row]);\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, copy);\n      flipCell(y, x + 1, copy);\n      flipCell(y, x - 1, copy);\n      flipCell(y + 1, x, copy);\n      flipCell(y - 1, x, copy);\n      // TODO: return the copy\n      return copy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <div>You Win!</div>;\n  }\n  // TODO\n\n  // make table board\n  let tableBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tableBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  return (\n    <div>\n      <table className=\"Board\">\n        <tbody>{tableBoard}</tbody>\n      </table>\n    </div>\n  );\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}