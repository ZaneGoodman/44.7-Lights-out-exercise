{"ast":null,"code":"var _jsxFileName = \"/home/zanegoodman/Springboard/Section_44_ReactJS_Fundamentals/44.7_Component_design/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be:\n * [[f, f, f],\n * [t, t, f],\n * [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n  const chance = () => Math.floor(Math.random() * chanceLightStartsOn) + 1;\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = Array.from({\n      length: ncols\n    }, () => Array.from({\n      length: nrows\n    }, () => chance() === chanceLightStartsOn ? true : false));\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.forEach(col => col.every(row => row === true));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const copy = [...oldBoard];\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, copy);\n      // TODO: return the copy\n      return copy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: board.map(col => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: col.map(cell => /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: cell,\n          flipCellsAroundMe: flipCellsAround\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n  // TODO\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","chance","Math","floor","random","initialBoard","Array","from","length","hasWon","forEach","col","every","row","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","copy","children","cell","isLit","flipCellsAroundMe","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/zanegoodman/Springboard/Section_44_ReactJS_Fundamentals/44.7_Component_design/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be:\n * [[f, f, f],\n * [t, t, f],\n * [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n  const chance = () => Math.floor(Math.random() * chanceLightStartsOn) + 1;\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = Array.from({ length: ncols }, () =>\n      Array.from({ length: nrows }, () =>\n        chance() === chanceLightStartsOn ? true : false\n      )\n    );\n    // TODO: create array-of-arrays of true/false values\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    return board.forEach((col) => col.every((row) => row === true));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard((oldBoard) => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const copy = [...oldBoard];\n      // TODO: in the copy, flip this cell and the cells around it\n      flipCell(y, x, copy);\n      // TODO: return the copy\n      return copy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n  return (\n    <div>\n      <table>\n        {board.map((col) => (\n          <tr>\n            {col.map((cell) => (\n              <Cell isLit={cell} flipCellsAroundMe={flipCellsAround} />\n            ))}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}